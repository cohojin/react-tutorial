{"ast":null,"code":"var _jsxFileName = \"/Users/sinhae/react-tutorial/begin-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser'; // import Hello from './Hello'; \n// import Wrapper from './Wrapper';\n// import Counter from './Counter';\n// import InputSample from './InputSample'; \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: ''\n  });\n  const {\n    username,\n    email\n  } = inputs;\n\n  const onChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputs({ ...inputs,\n      // 기존에 객체 복사 \n      [name]: value\n    });\n  };\n\n  const [users, setUsers] = useState([{\n    id: 1,\n    username: 'velopert',\n    email: 'public.velopert@gmail.com'\n  }, {\n    id: 2,\n    username: 'tester',\n    email: 'tester@example.com'\n  }, {\n    id: 3,\n    username: 'liz',\n    email: 'liz@example.com'\n  }]);\n  const nextId = useRef(4); // 컴포넌트가 리렌더링된다 한들 같은 값을 가지고 있다.\n\n  const onCreate = () => {\n    setInputs({\n      username: ' ',\n      email: ' '\n    });\n    console.log(nextId.current); // 4\n\n    nextId.current += 1; // 이 값이 바뀐다고 한들 컴포넌트가 리렌더링 되지는 않는다. \n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CreateUser, {\n      username: username,\n      email: email,\n      onChange: onChange,\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserList, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"jmOkFDsoNr1Mp6EO3O8wpIsE21E=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sinhae/react-tutorial/begin-react/src/App.js"],"names":["React","useRef","useState","UserList","CreateUser","App","inputs","setInputs","username","email","onChange","e","name","value","target","users","setUsers","id","nextId","onCreate","console","log","current"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAsB,cAAtB,C,CACA;AACA;AACA;AACA;;;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,MAAD,EAAUC,SAAV,IAAuBL,QAAQ,CAAC;AACpCM,IAAAA,QAAQ,EAAC,EAD2B;AAEpCC,IAAAA,KAAK,EAAC;AAF8B,GAAD,CAArC;AAKA,QAAM;AAACD,IAAAA,QAAD;AAAYC,IAAAA;AAAZ,MAAqBH,MAA3B;;AAEA,QAAMI,QAAQ,GAAIC,CAAD,IAAM;AACrB,UAAK;AAAEC,MAAAA,IAAF;AAAOC,MAAAA;AAAP,QAAgBF,CAAC,CAACG,MAAvB;AACAP,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AACG;AACX,OAACM,IAAD,GAASC;AAFD,KAAD,CAAT;AAID,GAND;;AAQA,QAAM,CAACE,KAAD,EAASC,QAAT,IAAqBd,QAAQ,CAAC,CAClC;AACEe,IAAAA,EAAE,EAAC,CADL;AAEET,IAAAA,QAAQ,EAAC,UAFX;AAGEC,IAAAA,KAAK,EAAE;AAHT,GADkC,EAMlC;AACEQ,IAAAA,EAAE,EAAC,CADL;AAEET,IAAAA,QAAQ,EAAC,QAFX;AAGEC,IAAAA,KAAK,EAAC;AAHR,GANkC,EAWlC;AACEQ,IAAAA,EAAE,EAAC,CADL;AAEET,IAAAA,QAAQ,EAAC,KAFX;AAGEC,IAAAA,KAAK,EAAC;AAHR,GAXkC,CAAD,CAAnC;AAoBA,QAAMS,MAAM,GAAGjB,MAAM,CAAC,CAAD,CAArB,CApCa,CAoCa;;AAE1B,QAAMkB,QAAQ,GAAG,MAAM;AACrBZ,IAAAA,SAAS,CAAC;AACRC,MAAAA,QAAQ,EAAE,GADF;AAERC,MAAAA,KAAK,EAAE;AAFC,KAAD,CAAT;AAKAW,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB,EANqB,CAMQ;;AAC7BJ,IAAAA,MAAM,CAACI,OAAP,IAAkB,CAAlB,CAPqB,CAOC;AACvB,GARD;;AAUA,sBACE;AAAA,4BACE,QAAC,UAAD;AACE,MAAA,QAAQ,EAAEd,QADZ;AAEE,MAAA,KAAK,EAAEC,KAFT;AAGE,MAAA,QAAQ,EAAEC,QAHZ;AAIE,MAAA,QAAQ,EAAES;AAJZ;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEJ;AAAjB;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA,kBADF;AAWD;;GA3DQV,G;;KAAAA,G;AA6DT,eAAeA,GAAf","sourcesContent":["import React, { useRef, useState } from 'react';\nimport UserList from './UserList';\nimport CreateUser from'./CreateUser';\n// import Hello from './Hello'; \n// import Wrapper from './Wrapper';\n// import Counter from './Counter';\n// import InputSample from './InputSample'; \n\n\nfunction App() {\n  const [inputs , setInputs] = useState({\n    username:'' ,\n    email:'',\n  });\n\n  const {username , email} = inputs;\n\n  const onChange = (e) =>{\n    const{ name,value} = e.target; \n    setInputs({\n      ...inputs, // 기존에 객체 복사 \n      [name] : value\n    });\n  };\n\n  const [users , setUsers] = useState([\n    {\n      id:1,\n      username:'velopert',\n      email: 'public.velopert@gmail.com'\n    },\n    {\n      id:2,\n      username:'tester',\n      email:'tester@example.com'\n    },\n    {\n      id:3,\n      username:'liz',\n      email:'liz@example.com'\n    }\n  ]);\n\n\n\n  const nextId = useRef(4); // 컴포넌트가 리렌더링된다 한들 같은 값을 가지고 있다.\n\n  const onCreate = () => {\n    setInputs({\n      username: ' ',\n      email: ' '\n    });\n\n    console.log(nextId.current); // 4\n    nextId.current += 1;  // 이 값이 바뀐다고 한들 컴포넌트가 리렌더링 되지는 않는다. \n  }\n\n  return (\n    <>\n      <CreateUser \n        username={username} \n        email={email}\n        onChange={onChange}\n        onCreate={onCreate}\n      />\n      <UserList users={users}/>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}